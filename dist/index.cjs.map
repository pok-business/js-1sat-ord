{"version":3,"file":"index.cjs","sources":["../node_modules/dotenv/lib/main.js","../src/utils/strings.ts","../src/index.ts"],"sourcesContent":["const fs = require('fs')\nconst path = require('path')\nconst os = require('os')\nconst packageJson = require('../package.json')\n\nconst version = packageJson.version\n\nconst LINE = /(?:^|^)\\s*(?:export\\s+)?([\\w.-]+)(?:\\s*=\\s*?|:\\s+?)(\\s*'(?:\\\\'|[^'])*'|\\s*\"(?:\\\\\"|[^\"])*\"|\\s*`(?:\\\\`|[^`])*`|[^#\\r\\n]+)?\\s*(?:#.*)?(?:$|$)/mg\n\n// Parser src into an Object\nfunction parse (src) {\n  const obj = {}\n\n  // Convert buffer to string\n  let lines = src.toString()\n\n  // Convert line breaks to same format\n  lines = lines.replace(/\\r\\n?/mg, '\\n')\n\n  let match\n  while ((match = LINE.exec(lines)) != null) {\n    const key = match[1]\n\n    // Default undefined or null to empty string\n    let value = (match[2] || '')\n\n    // Remove whitespace\n    value = value.trim()\n\n    // Check if double quoted\n    const maybeQuote = value[0]\n\n    // Remove surrounding quotes\n    value = value.replace(/^(['\"`])([\\s\\S]*)\\1$/mg, '$2')\n\n    // Expand newlines if double quoted\n    if (maybeQuote === '\"') {\n      value = value.replace(/\\\\n/g, '\\n')\n      value = value.replace(/\\\\r/g, '\\r')\n    }\n\n    // Add to object\n    obj[key] = value\n  }\n\n  return obj\n}\n\nfunction _log (message) {\n  console.log(`[dotenv@${version}][DEBUG] ${message}`)\n}\n\nfunction _resolveHome (envPath) {\n  return envPath[0] === '~' ? path.join(os.homedir(), envPath.slice(1)) : envPath\n}\n\n// Populates process.env from .env file\nfunction config (options) {\n  let dotenvPath = path.resolve(process.cwd(), '.env')\n  let encoding = 'utf8'\n  const debug = Boolean(options && options.debug)\n  const override = Boolean(options && options.override)\n\n  if (options) {\n    if (options.path != null) {\n      dotenvPath = _resolveHome(options.path)\n    }\n    if (options.encoding != null) {\n      encoding = options.encoding\n    }\n  }\n\n  try {\n    // Specifying an encoding returns a string instead of a buffer\n    const parsed = DotenvModule.parse(fs.readFileSync(dotenvPath, { encoding }))\n\n    Object.keys(parsed).forEach(function (key) {\n      if (!Object.prototype.hasOwnProperty.call(process.env, key)) {\n        process.env[key] = parsed[key]\n      } else {\n        if (override === true) {\n          process.env[key] = parsed[key]\n        }\n\n        if (debug) {\n          if (override === true) {\n            _log(`\"${key}\" is already defined in \\`process.env\\` and WAS overwritten`)\n          } else {\n            _log(`\"${key}\" is already defined in \\`process.env\\` and was NOT overwritten`)\n          }\n        }\n      }\n    })\n\n    return { parsed }\n  } catch (e) {\n    if (debug) {\n      _log(`Failed to load ${dotenvPath} ${e.message}`)\n    }\n\n    return { error: e }\n  }\n}\n\nconst DotenvModule = {\n  config,\n  parse\n}\n\nmodule.exports.config = DotenvModule.config\nmodule.exports.parse = DotenvModule.parse\nmodule.exports = DotenvModule\n","const toHex = (asciiStr: string) => {\n  var arr1: string[] = [];\n  for (var n = 0, l = asciiStr.length; n < l; n++) {\n    var hex = Number(asciiStr.charCodeAt(n)).toString(16);\n    arr1.push(hex);\n  }\n  return arr1.join(\"\");\n};\n\nconst toAscii = (hexStr: string) => {\n  var hex, i;\n\n  var result = \"\";\n  for (i = 0; i < hexStr.length; i++) {\n    hex = hexStr.charCodeAt(i).toString(16);\n    result += (\"000\" + hex).slice(-4);\n  }\n\n  return result;\n};\n\nexport { toHex, toAscii };\n","import {\n  P2PKHAddress,\n  PrivateKey,\n  Script,\n  SigHash,\n  Transaction,\n  TxIn,\n  TxOut,\n} from \"bsv-wasm\";\nimport { Buffer } from \"buffer\";\nimport * as dotenv from \"dotenv\";\nimport { AuthToken, Sigma } from \"sigma-protocol\";\nimport { toHex } from \"./utils/strings\";\n\ndotenv.config();\n\ntype Signer = {};\n\nexport interface LocalSigner extends Signer {\n  idKey: PrivateKey;\n}\n\nexport interface RemoteSigner extends Signer {\n  keyHost: string;\n  authToken?: AuthToken;\n}\n\nexport type Utxo = {\n  satoshis: number;\n  txid: string;\n  vout: number;\n  script: string;\n};\n\nexport type Inscription = {\n  dataB64: string;\n  contentType: string;\n};\n\nexport type MAP = {\n  app: string;\n  type: string;\n  [prop: string]: string | string[];\n};\n\nconst MAP_PREFIX = \"1PuQa7K62MiKCtssSLKy1kh56WWU7MtUR5\";\n\nconst buildInscription = (\n  destinationAddress: P2PKHAddress,\n  b64File?: string | undefined,\n  mediaType?: string | undefined,\n  metaData?: MAP | undefined\n): Script => {\n  let ordAsm = \"\";\n  // This can be omitted for reinscriptions that just update metadata\n  if (b64File !== undefined && mediaType !== undefined) {\n    const ordHex = toHex(\"ord\");\n    const fsBuffer = Buffer.from(b64File, \"base64\");\n    const fireShardHex = fsBuffer.toString(\"hex\");\n    const fireShardMediaType = toHex(mediaType);\n    ordAsm = `OP_0 OP_IF ${ordHex} OP_1 ${fireShardMediaType} OP_0 ${fireShardHex} OP_ENDIF`;\n  }\n\n  // Create ordinal output and inscription in a single output\n  let inscriptionAsm = `${destinationAddress\n    .get_locking_script()\n    .to_asm_string()}${ordAsm ? \" \" + ordAsm : \"\"}`;\n\n  // MAP.app and MAP.type keys are required\n  if (metaData && metaData?.app && metaData?.type) {\n    const mapPrefixHex = toHex(MAP_PREFIX);\n    const mapCmdValue = toHex(\"SET\");\n    inscriptionAsm = `${inscriptionAsm} OP_RETURN ${mapPrefixHex} ${mapCmdValue}`;\n\n    for (const [key, value] of Object.entries(metaData)) {\n      if (key !== \"cmd\") {\n        inscriptionAsm = `${inscriptionAsm} ${toHex(key)} ${toHex(\n          value as string\n        )}`;\n      }\n    }\n  }\n\n  return Script.from_asm_string(inscriptionAsm);\n};\n\nexport const buildReinscriptionTemplate = async (\n  ordinal: Utxo,\n  destinationAddress: string,\n  reinscription?: Inscription,\n  metaData?: MAP\n): Promise<Transaction> => {\n  let tx = new Transaction(1, 0);\n\n  // Inputs\n  let utxoIn = new TxIn(\n    Buffer.from(ordinal.txid, \"hex\"),\n    ordinal.vout,\n    Script.from_asm_string(ordinal.script)\n  );\n\n  tx.add_input(utxoIn);\n\n  // Outputs\n  const inscriptionScript = buildInscription(\n    P2PKHAddress.from_string(destinationAddress),\n    reinscription?.dataB64,\n    reinscription?.contentType,\n    metaData\n  );\n\n  let satOut = new TxOut(BigInt(1), inscriptionScript);\n  tx.add_output(satOut);\n\n  return tx;\n};\n\nexport type Payment = {\n  to: string;\n  amount: bigint;\n};\n\nconst createOrdinal = async (\n  utxo: Utxo,\n  destinationAddress: string,\n  paymentPk: PrivateKey,\n  changeAddress: string,\n  satPerByteFee: number,\n  inscription: Inscription,\n  metaData?: MAP,\n  signer?: LocalSigner | RemoteSigner,\n  additionalPayments: Payment[] = [],\n  fundingTx?: Transaction\n): Promise<Transaction> => {\n\n  let tx = fundingTx || new Transaction(1, 0);\n  let utxoIn\n\n  if (!fundingTx) {\n\n    // Inputs\n    utxoIn = new TxIn(\n      Buffer.from(utxo.txid, \"hex\"),\n      utxo.vout,\n      Script.from_asm_string(\"\")\n    );\n\n    tx.add_input(utxoIn);\n\n  }\n\n  // Outputs\n  const inscriptionScript = buildInscription(\n    P2PKHAddress.from_string(destinationAddress),\n    inscription.dataB64,\n    inscription.contentType,\n    metaData\n  );\n\n  let satOut = new TxOut(BigInt(1), inscriptionScript);\n  tx.add_output(satOut);\n\n  // add additional payments if any\n  for (let p of additionalPayments) {\n    let satOut = new TxOut(\n      p.amount,\n      P2PKHAddress.from_string(p.to).get_locking_script()\n    );\n    tx.add_output(satOut);\n  }\n\n  // total the outputs\n  let totalOut = 0n;\n  let numOuts = tx.get_noutputs();\n  for (const i of Array(numOuts).keys()) {\n    totalOut += tx.get_output(i)?.get_satoshis() || 0n;\n  }\n\n  // add change\n  const changeaddr = P2PKHAddress.from_string(changeAddress);\n  const changeScript = changeaddr.get_locking_script();\n  const fee = Math.ceil(\n    satPerByteFee * (tx.get_size() + P2PKH_OUTPUT_SIZE + P2PKH_INPUT_SCRIPT_SIZE)\n  );\n  const change = BigInt(utxo.satoshis) - totalOut - BigInt(fee);\n  if (change < 0) throw new Error(\"Inadequate satoshis for fee\");\n  if (change > 0) {\n    let changeOut = new TxOut(BigInt(change), changeScript);\n    tx.add_output(changeOut);\n  }\n\n  // sign tx if idKey or remote signer like starfish/tokenpass\n  const idKey = (signer as LocalSigner)?.idKey;\n  const keyHost = (signer as RemoteSigner)?.keyHost;\n  if (idKey) {\n    // input txids are available so sigma signature\n    // can be final before signing the tx\n    const sigma = new Sigma(tx);\n    const { signedTx } = sigma.sign(idKey);\n    tx = signedTx;\n  } else if (keyHost) {\n    const authToken = (signer as RemoteSigner)?.authToken;\n    const sigma = new Sigma(tx);\n    try {\n      const { signedTx } = await sigma.remoteSign(keyHost, authToken);\n      tx = signedTx;\n    } catch (e) {\n      console.log(e);\n      throw new Error(\"Remote signing to \" + keyHost + \" failed\");\n    }\n  }\n\n  if (!fundingTx && utxoIn) {\n\n    const sig = tx.sign(\n      paymentPk,\n      SigHash.ALL | SigHash.FORKID,\n      0,\n      Script.from_asm_string(utxo.script),\n      BigInt(utxo.satoshis)\n    );\n\n    utxoIn.set_unlocking_script(\n      Script.from_asm_string(\n        `${sig.to_hex()} ${paymentPk.to_public_key().to_hex()}`\n      )\n    );\n\n    tx.set_input(0, utxoIn);\n  }\n\n\n  return tx;\n};\n\nconst sendOrdinal = async (\n  paymentUtxo: Utxo,\n  ordinal: Utxo,\n  paymentPk: PrivateKey,\n  changeAddress: string,\n  satPerByteFee: number,\n  ordPk: PrivateKey,\n  ordDestinationAddress: string,\n  reinscription?: Inscription,\n  metaData?: MAP,\n  additionalPayments: Payment[] = []\n): Promise<Transaction> => {\n  let tx = new Transaction(1, 0);\n\n  // Inputs\n  let ordIn = new TxIn(\n    Buffer.from(ordinal.txid, \"hex\"),\n    ordinal.vout,\n    Script.from_asm_string(\"\")\n  );\n  tx.add_input(ordIn);\n\n  let utxoIn = new TxIn(\n    Buffer.from(paymentUtxo.txid, \"hex\"),\n    paymentUtxo.vout,\n    Script.from_asm_string(\"\")\n  );\n\n  tx.add_input(utxoIn);\n\n  let s: Script;\n  const destinationAddress = P2PKHAddress.from_string(ordDestinationAddress);\n  if (reinscription?.dataB64 && reinscription?.contentType) {\n    s = buildInscription(\n      destinationAddress,\n      reinscription.dataB64,\n      reinscription.contentType,\n      metaData\n    );\n  } else {\n    s = destinationAddress.get_locking_script();\n  }\n  let satOut = new TxOut(BigInt(1), s);\n  tx.add_output(satOut);\n\n  // add additional payments if any\n  for (let p of additionalPayments) {\n    let satOut = new TxOut(\n      p.amount,\n      P2PKHAddress.from_string(p.to).get_locking_script()\n    );\n    tx.add_output(satOut);\n  }\n\n  // total the outputs\n  let totalOut = 0n;\n  let numOuts = tx.get_noutputs();\n  for (const i of Array(numOuts).keys()) {\n    totalOut += tx.get_output(i)?.get_satoshis() || 0n;\n  }\n\n  // add change\n  const changeaddr = P2PKHAddress.from_string(changeAddress);\n  const changeScript = changeaddr.get_locking_script();\n\n  const fee = Math.ceil(\n    satPerByteFee *\n    (tx.get_size() + P2PKH_OUTPUT_SIZE + 2 * P2PKH_INPUT_SCRIPT_SIZE)\n  );\n  const change = BigInt(paymentUtxo.satoshis) - totalOut - BigInt(fee);\n  let changeOut = new TxOut(change, changeScript);\n\n  tx.add_output(changeOut);\n\n  // sign ordinal\n  const sig = tx.sign(\n    ordPk,\n    SigHash.InputOutput,\n    0,\n    Script.from_asm_string(ordinal.script),\n    BigInt(ordinal.satoshis)\n  );\n\n  ordIn.set_unlocking_script(\n    Script.from_asm_string(`${sig.to_hex()} ${ordPk.to_public_key().to_hex()}`)\n  );\n\n  tx.set_input(0, ordIn);\n\n  // sign fee payment\n  const sig2 = tx.sign(\n    paymentPk,\n    SigHash.InputOutput,\n    1,\n    Script.from_asm_string(paymentUtxo.script),\n    BigInt(paymentUtxo.satoshis)\n  );\n\n  utxoIn.set_unlocking_script(\n    Script.from_asm_string(\n      `${sig2.to_hex()} ${paymentPk.to_public_key().to_hex()}`\n    )\n  );\n\n  tx.set_input(1, utxoIn);\n\n  return tx;\n};\n\n// sendUtxos sends p2pkh utxos to the given destinationAddress\nconst sendUtxos = async (\n  utxos: Utxo[],\n  paymentPk: PrivateKey,\n  address: P2PKHAddress,\n  feeSats: number\n): Promise<Transaction> => {\n  const tx = new Transaction(1, 0);\n\n  // Outputs\n  let inputValue = 0;\n  for (let u of utxos || []) {\n    inputValue += u.satoshis;\n  }\n  const satsIn = inputValue;\n  const satsOut = satsIn - feeSats;\n  console.log({ feeSats, satsIn, satsOut });\n  tx.add_output(new TxOut(BigInt(satsOut), address.get_locking_script()));\n\n  // build txins from our UTXOs\n  let idx = 0;\n  for (let u of utxos || []) {\n    console.log({ u });\n    const inx = new TxIn(\n      Buffer.from(u.txid, \"hex\"),\n      u.vout,\n      Script.from_asm_string(\"\")\n    );\n    console.log({ inx });\n    inx.set_satoshis(BigInt(u.satoshis));\n    tx.add_input(inx);\n\n    const sig = tx.sign(\n      paymentPk,\n      SigHash.InputOutputs,\n      idx,\n      Script.from_asm_string(u.script),\n      BigInt(u.satoshis)\n    );\n\n    inx.set_unlocking_script(\n      Script.from_asm_string(\n        `${sig.to_hex()} ${paymentPk.to_public_key().to_hex()}`\n      )\n    );\n\n    tx.set_input(idx, inx);\n    idx++;\n  }\n  return tx;\n};\n\nexport const P2PKH_INPUT_SCRIPT_SIZE = 107;\nexport const P2PKH_FULL_INPUT_SIZE = 148;\nexport const P2PKH_OUTPUT_SIZE = 34;\n\nexport { buildInscription, createOrdinal, sendOrdinal, sendUtxos };\n"],"names":["LINE","_log","message","console","log","DotenvModule","config","options","dotenvPath","path","resolve","process","cwd","encoding","debug","Boolean","override","envPath","join","os","homedir","slice","parsed","parse","fs","readFileSync","Object","keys","forEach","key","prototype","hasOwnProperty","call","env","e","error","src","obj","match","lines","toString","replace","exec","value","trim","maybeQuote","config_1","parse_1","main","toHex","asciiStr","arr1","n","l","length","hex","Number","charCodeAt","push","dotenv","buildInscription","destinationAddress","b64File","mediaType","metaData","ordAsm","undefined","ordHex","fireShardHex","Buffer","from","inscriptionAsm","get_locking_script","to_asm_string","app","type","mapPrefixHex","_i","_Object$entries","entries","_Object$entries$_i","Script","from_asm_string","ordinal","reinscription","tx","Transaction","utxoIn","TxIn","txid","vout","script","add_input","inscriptionScript","P2PKHAddress","from_string","dataB64","contentType","satOut","TxOut","BigInt","add_output","Promise","reject","utxo","paymentPk","changeAddress","satPerByteFee","inscription","signer","additionalPayments","fundingTx","_temp2","_result3","sig","sign","SigHash","ALL","FORKID","satoshis","set_unlocking_script","to_hex","to_public_key","set_input","_iterator","_step","_createForOfIteratorHelperLoose","done","p","amount","to","_step2","totalOut","numOuts","get_noutputs","_iterator2","Array","_tx$get_output","get_output","get_satoshis","changeScript","fee","Math","ceil","get_size","change","Error","changeOut","idKey","keyHost","_temp","authToken","sigma","Sigma","remoteSign","then","_ref","signedTx","_catch","_sigma$sign","paymentUtxo","ordPk","ordDestinationAddress","ordIn","s","_step3","_iterator3","_step4","_iterator4","_tx$get_output2","InputOutput","sig2","utxos","address","feeSats","_step5","inputValue","_iterator5","satsOut","satsIn","_step6","idx","_iterator6","u","inx","set_satoshis","InputOutputs"],"mappings":"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"}